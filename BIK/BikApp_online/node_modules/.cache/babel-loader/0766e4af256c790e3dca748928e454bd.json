{"ast":null,"code":"import { useState, useEffect, useReducer } from 'react';\nimport productReducer from '../reducer/productReducer';\nimport { FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, CART_ITEMS } from '../actions/types';\nexport default (() => {\n  const [search, setSearch] = useState(\"\");\n  const [cartItems, setCartItems] = useState([]);\n  const initialStateProducts = {\n    products: [],\n    filteredProducts: [],\n    search: \"\",\n    cartItems: []\n  };\n  const [state, dispatch] = useReducer(productReducer, initialStateProducts); //Products\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/products/\").then(res => res.json()).then(jsonResponse => {\n      dispatch({\n        type: FETCH_PRODUCTS,\n        payload: jsonResponse\n      });\n    });\n    return () => {};\n  }, []);\n  console.log(state, \"prod\"); //Local Storage\n\n  useEffect(() => {\n    if (localStorage.getItem(\"cartItems\")) {\n      dispatch({\n        type: CART_ITEMS,\n        data: JSON.parse(localStorage.getItem(\"cartItems\"))\n      });\n    }\n\n    return () => {\n      localStorage.getItem(\"cartItems\");\n      console.log(\"clean up\");\n    };\n  }, []); //Search \n\n  useEffect(() => {\n    dispatch({\n      type: SEARCH_PRODUCTS,\n      data: search\n    });\n    return () => {\n      console.log(\"clean up\");\n    };\n  }, [search, state.products]);\n  return {\n    filteredProducts: state.filteredProducts,\n    onAddCart: product => {\n      const cartItem = cartItems;\n      let productAlreadyInCart = false;\n      cartItem.forEach(item => {\n        if (item.id === product.id) {\n          productAlreadyInCart = true;\n          item.count++;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        cartItem.push({ ...product,\n          count: 1\n        });\n      }\n\n      setCartItems([...cartItem]);\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n    },\n    handleSearch: value => {\n      setSearch(value);\n    },\n    handleChangeSort: sort => {\n      dispatch({\n        type: SORT_PRODUCTS,\n        data: sort\n      });\n    },\n    onRemoveCart: removeItem => {\n      setCartItems([...cartItems].filter(item => {\n        if (item.id === removeItem.id && removeItem.count <= 1) return false;else {\n          if (item.id === removeItem.id && removeItem.count > 1) item.count--;\n          return true;\n        }\n      }));\n      localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n    },\n    cartItems,\n    search\n  };\n});","map":{"version":3,"sources":["/Users/graj/projects/e-commerece/src/components/useProducts.js"],"names":["useState","useEffect","useReducer","productReducer","FETCH_PRODUCTS","SEARCH_PRODUCTS","SORT_PRODUCTS","CART_ITEMS","search","setSearch","cartItems","setCartItems","initialStateProducts","products","filteredProducts","state","dispatch","fetch","then","res","json","jsonResponse","type","payload","console","log","localStorage","getItem","data","JSON","parse","onAddCart","product","cartItem","productAlreadyInCart","forEach","item","id","count","push","setItem","stringify","handleSearch","value","handleChangeSort","sort","onRemoveCart","removeItem","filter"],"mappings":"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","sourcesContent":["import {useState,useEffect,useReducer} from 'react';\nimport productReducer from '../reducer/productReducer';\nimport { FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, CART_ITEMS } from '../actions/types';\n\n\nexport default () => {\n\n\n  const [search, setSearch] = useState(\"\");\n  const [cartItems,setCartItems] = useState([]);\n\n  const initialStateProducts = {\n      products:[],\n      filteredProducts:[],\n      search:\"\",\n      cartItems:[]\n    }\n\n  const [state, dispatch] = useReducer(productReducer, initialStateProducts)\n\n//Products\n    useEffect(() => {\n      fetch(\"http://localhost:8000/products/\")\n        .then(res => res.json())\n        .then(jsonResponse => { \n            dispatch({type:FETCH_PRODUCTS,payload:jsonResponse});\n        })\n          return () => {\n           \n            }\n        }, []);\n\n        console.log(state,\"prod\")\n //Local Storage\n  useEffect(() => {\n    if(localStorage.getItem(\"cartItems\")){\n        dispatch({type:CART_ITEMS,data:JSON.parse(localStorage.getItem(\"cartItems\"))})\n    }\n        return () => {\n          localStorage.getItem(\"cartItems\");\n          console.log(\"clean up\");\n        };\n    }, [])\n\n\n  //Search \n  useEffect(() => {\n    dispatch({type:SEARCH_PRODUCTS,data:search})\n\n    return () => {\n      console.log(\"clean up\");\n    };\n  }, [search,state.products])\n\n\n\nreturn{\n    filteredProducts:state.filteredProducts,\n    onAddCart : (product) => {\n        const cartItem = cartItems;\n        let productAlreadyInCart = false;\n        cartItem.forEach(item => {\n            if(item.id===product.id){\n                productAlreadyInCart  = true;\n                item.count++;\n            }\n        })\n          if(!productAlreadyInCart){\n            cartItem.push({...product,count:1})\n          }\n        setCartItems([...cartItem]);\n        localStorage.setItem(\"cartItems\",JSON.stringify(cartItems));\n      },\n      handleSearch : (value) => {\n        setSearch(value);\n      },\n      handleChangeSort : (sort) => {\n         dispatch({type:SORT_PRODUCTS,data:sort})\n      },\n      onRemoveCart : (removeItem) => {\n        setCartItems([...cartItems].filter(item => {\n            if(item.id===removeItem.id && removeItem.count<=1)\n              return false;\n            else{\n              if(item.id===removeItem.id && removeItem.count>1)\n                item.count--;\n              return true;\n            }\n        }));\n        localStorage.setItem(\"cartItems\",JSON.stringify(cartItems));\n      },\n      cartItems,\n      search\n  \n}\n\n}"]},"metadata":{},"sourceType":"module"}