{"ast":null,"code":"import { FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, FETCH_CART_ITEMS, ADD_TO_CART } from \"../actions/types\";\n\nconst productReducer = (state, action) => {\n  switch (action.type) {\n    case FETCH_PRODUCTS:\n      return { ...state,\n        products: action.payload,\n        filteredProducts: action.payload\n      };\n\n    case SEARCH_PRODUCTS:\n      return { ...state,\n        filteredProducts: [...state.products].filter(product => {\n          return product.title.toLowerCase().includes(action.data.toLowerCase());\n        })\n      };\n\n    case SORT_PRODUCTS:\n      if (action.data !== '') {\n        const updated = [...state.products].sort((a, b) => {\n          return action.data === \"lowest\" ? a.price > b.price ? 1 : -1 : a.price < b.price ? 1 : -1;\n        });\n        return { ...state,\n          filteredProducts: updated\n        };\n      } else {\n        const updated = [...state.products].sort((a, b) => {\n          return a.id < b.id ? 1 : -1;\n        });\n        return { ...state,\n          filteredProducts: updated\n        };\n      }\n\n    case FETCH_CART_ITEMS:\n      return { ...state,\n        cartItems: action.data\n      };\n\n    case ADD_TO_CART:\n      {\n        const cartItem = state.cartItems.splice();\n        let productAlreadyInCart = false;\n        cartItem.forEach(item => {\n          if (item.id === action.data.id) {\n            console.log(item, \"item\");\n            productAlreadyInCart = true;\n            item.count++;\n          }\n        });\n\n        if (!productAlreadyInCart) {\n          cartItem.push({ ...action.data,\n            count: 1\n          });\n          console.log(cartItem, \"cart\");\n        }\n\n        return { ...state,\n          cartItems: cartItem\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default productReducer;","map":{"version":3,"sources":["/Users/graj/projects/e-commerece/src/reducer/productReducer.js"],"names":["FETCH_PRODUCTS","SEARCH_PRODUCTS","SORT_PRODUCTS","FETCH_CART_ITEMS","ADD_TO_CART","productReducer","state","action","type","products","payload","filteredProducts","filter","product","title","toLowerCase","includes","data","updated","sort","a","b","price","id","cartItems","cartItem","splice","productAlreadyInCart","forEach","item","console","log","count","push"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,eAAxB,EAAyCC,aAAzC,EAAwDC,gBAAxD,EAA0EC,WAA1E,QAA6F,kBAA7F;;AAGA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAASC,MAAT,KAAoB;AAC1C,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKR,cAAL;AACC,aAAO,EAAC,GAAGM,KAAJ;AACMG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OADvB;AAEMC,QAAAA,gBAAgB,EAACJ,MAAM,CAACG;AAF9B,OAAP;;AAIM,SAAKT,eAAL;AACO,aAAO,EACH,GAAGK,KADA;AAEHK,QAAAA,gBAAgB,EAAC,CAAC,GAAGL,KAAK,CAACG,QAAV,EAAoBG,MAApB,CAA2BC,OAAO,IAAI;AACnD,iBAAOA,OAAO,CAACC,KAAR,CAAcC,WAAd,GAA4BC,QAA5B,CAAqCT,MAAM,CAACU,IAAP,CAAYF,WAAZ,EAArC,CAAP;AACF,SAFe;AAFd,OAAP;;AAMP,SAAKb,aAAL;AACO,UAAGK,MAAM,CAACU,IAAP,KAAc,EAAjB,EAAoB;AAChB,cAAMC,OAAO,GAAI,CAAC,GAAGZ,KAAK,CAACG,QAAV,EAAoBU,IAApB,CAAyB,CAACC,CAAD,EAAGC,CAAH,KAAS;AACjD,iBAAQd,MAAM,CAACU,IAAP,KAAc,QAAf,GAA0BG,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAkB,CAAlB,GAAoB,CAAC,CAA/C,GAAmDF,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAkB,CAAlB,GAAoB,CAAC,CAA/E;AACD,SAFgB,CAAjB;AAGD,eAAO,EAAC,GAAGhB,KAAJ;AAAUK,UAAAA,gBAAgB,EAACO;AAA3B,SAAP;AACF,OALD,MAMI;AACF,cAAMA,OAAO,GAAG,CAAC,GAAGZ,KAAK,CAACG,QAAV,EAAoBU,IAApB,CAAyB,CAACC,CAAD,EAAGC,CAAH,KAAQ;AAAE,iBAAQD,CAAC,CAACG,EAAF,GAAOF,CAAC,CAACE,EAAT,GAAa,CAAb,GAAe,CAAC,CAAxB;AAA2B,SAA9D,CAAhB;AACA,eAAO,EAAC,GAAGjB,KAAJ;AAAUK,UAAAA,gBAAgB,EAACO;AAA3B,SAAP;AACD;;AACT,SAAKf,gBAAL;AACQ,aAAM,EACF,GAAGG,KADD;AAEFkB,QAAAA,SAAS,EAACjB,MAAM,CAACU;AAFf,OAAN;;AAIR,SAAKb,WAAL;AAAiB;AACb,cAAMqB,QAAQ,GAAGnB,KAAK,CAACkB,SAAN,CAAgBE,MAAhB,EAAjB;AACA,YAAIC,oBAAoB,GAAG,KAA3B;AACAF,QAAAA,QAAQ,CAACG,OAAT,CAAiBC,IAAI,IAAI;AACrB,cAAGA,IAAI,CAACN,EAAL,KAAUhB,MAAM,CAACU,IAAP,CAAYM,EAAzB,EAA4B;AACxBO,YAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAiB,MAAjB;AACAF,YAAAA,oBAAoB,GAAI,IAAxB;AACAE,YAAAA,IAAI,CAACG,KAAL;AACH;AACJ,SAND;;AAOE,YAAG,CAACL,oBAAJ,EAAyB;AACvBF,UAAAA,QAAQ,CAACQ,IAAT,CAAc,EAAC,GAAG1B,MAAM,CAACU,IAAX;AAAgBe,YAAAA,KAAK,EAAC;AAAtB,WAAd;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EAAqB,MAArB;AACD;;AACG,eAAM,EACF,GAAGnB,KADD;AAEFkB,UAAAA,SAAS,EAACC;AAFR,SAAN;AAID;;AAEf;AACC,aAAOnB,KAAP;AAlDF;AAoDA,CArDD;;AAsDA,eAAgBD,cAAhB","sourcesContent":["import {FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, FETCH_CART_ITEMS, ADD_TO_CART}  from \"../actions/types\";\n\n\nconst productReducer = (state , action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_PRODUCTS:\n\t\t\treturn {...state,\n                products: action.payload,\n                filteredProducts:action.payload\n            }\n         case SEARCH_PRODUCTS:\n                return {\n                    ...state,\n                    filteredProducts:[...state.products].filter(product => {\n                        return product.title.toLowerCase().includes(action.data.toLowerCase());\n                     })\n                    }\n         case SORT_PRODUCTS:\n                if(action.data!==''){\n                    const updated =  [...state.products].sort((a,b) => {\n                      return (action.data===\"lowest\")?(a.price > b.price?1:-1):(a.price < b.price?1:-1);\n                    });\n                   return {...state,filteredProducts:updated};\n                }\n                else{\n                  const updated = [...state.products].sort((a,b)=> { return (a.id < b.id ?1:-1)});\n                  return {...state,filteredProducts:updated};\n                }\n        case FETCH_CART_ITEMS:\n                return{\n                    ...state,\n                    cartItems:action.data\n                }\n        case ADD_TO_CART:{\n            const cartItem = state.cartItems.splice();\n            let productAlreadyInCart = false;\n            cartItem.forEach(item => {\n                if(item.id===action.data.id){\n                    console.log(item,\"item\");\n                    productAlreadyInCart  = true;\n                    item.count++;\n                }\n            })\n              if(!productAlreadyInCart){\n                cartItem.push({...action.data,count:1})\n                console.log(cartItem,\"cart\")\n              }\n                  return{\n                      ...state,\n                      cartItems:cartItem\n                  }\n                }\n\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nexport default  productReducer;"]},"metadata":{},"sourceType":"module"}