{"ast":null,"code":"import { FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, FETCH_CART_ITEMS, REMOVE_FROM_CART } from \"../actions/types\";\nconst initialStateProducts = {\n  products: [],\n  filteredProducts: [],\n  search: \"\",\n  cartItems: []\n};\n\nconst productReducer = (state = initialStateProducts, action) => {\n  switch (action.type) {\n    case FETCH_PRODUCTS:\n      return { ...state,\n        products: action.payload,\n        filteredProducts: action.payload\n      };\n\n    case SEARCH_PRODUCTS:\n      return { ...state,\n        filteredProducts: [...state.products].filter(product => {\n          return product.title.toLowerCase().includes(action.data.toLowerCase());\n        })\n      };\n\n    case SORT_PRODUCTS:\n      if (action.data !== '') {\n        const updated = [...state.products].sort((a, b) => {\n          return action.data === \"lowest\" ? a.price > b.price ? 1 : -1 : a.price < b.price ? 1 : -1;\n        });\n        return { ...state,\n          filteredProducts: updated\n        };\n      } else {\n        const updated = [...state.products].sort((a, b) => {\n          return a.id < b.id ? 1 : -1;\n        });\n        return { ...state,\n          filteredProducts: updated\n        };\n      }\n\n    case FETCH_CART_ITEMS:\n      return { ...state,\n        cartItems: action.data\n      };\n\n    case REMOVE_FROM_CART:\n      {\n        const update = [...state.cartItems].filter(item => {\n          if (item.id === action.data.id && action.data.count <= 1) return false;else {\n            if (item.id === action.data.id && action.data.count > 1) item.count--;\n            return true;\n          }\n        });\n        return { ...state,\n          cartItems: update\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default productReducer;","map":{"version":3,"sources":["/Users/graj/projects/e-commerece/src/reducer/productReducer.js"],"names":["FETCH_PRODUCTS","SEARCH_PRODUCTS","SORT_PRODUCTS","FETCH_CART_ITEMS","REMOVE_FROM_CART","initialStateProducts","products","filteredProducts","search","cartItems","productReducer","state","action","type","payload","filter","product","title","toLowerCase","includes","data","updated","sort","a","b","price","id","update","item","count"],"mappings":"AAAA,SAAQA,cAAR,EAAwBC,eAAxB,EAAyCC,aAAzC,EAAwDC,gBAAxD,EAA0EC,gBAA1E,QAAkG,kBAAlG;AAEA,MAAMC,oBAAoB,GAAG;AACzBC,EAAAA,QAAQ,EAAC,EADgB;AAEzBC,EAAAA,gBAAgB,EAAC,EAFQ;AAGzBC,EAAAA,MAAM,EAAC,EAHkB;AAIzBC,EAAAA,SAAS,EAAC;AAJe,CAA7B;;AAOA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGN,oBAAT,EAAgCO,MAAhC,KAA2C;AACjE,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKb,cAAL;AACC,aAAO,EAAC,GAAGW,KAAJ;AACML,QAAAA,QAAQ,EAAEM,MAAM,CAACE,OADvB;AAEMP,QAAAA,gBAAgB,EAACK,MAAM,CAACE;AAF9B,OAAP;;AAIM,SAAKb,eAAL;AACO,aAAO,EACH,GAAGU,KADA;AAEHJ,QAAAA,gBAAgB,EAAC,CAAC,GAAGI,KAAK,CAACL,QAAV,EAAoBS,MAApB,CAA2BC,OAAO,IAAI;AACnD,iBAAOA,OAAO,CAACC,KAAR,CAAcC,WAAd,GAA4BC,QAA5B,CAAqCP,MAAM,CAACQ,IAAP,CAAYF,WAAZ,EAArC,CAAP;AACF,SAFe;AAFd,OAAP;;AAMP,SAAKhB,aAAL;AACO,UAAGU,MAAM,CAACQ,IAAP,KAAc,EAAjB,EAAoB;AAChB,cAAMC,OAAO,GAAI,CAAC,GAAGV,KAAK,CAACL,QAAV,EAAoBgB,IAApB,CAAyB,CAACC,CAAD,EAAGC,CAAH,KAAS;AACjD,iBAAQZ,MAAM,CAACQ,IAAP,KAAc,QAAf,GAA0BG,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAkB,CAAlB,GAAoB,CAAC,CAA/C,GAAmDF,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAkB,CAAlB,GAAoB,CAAC,CAA/E;AACD,SAFgB,CAAjB;AAGD,eAAO,EAAC,GAAGd,KAAJ;AAAUJ,UAAAA,gBAAgB,EAACc;AAA3B,SAAP;AACF,OALD,MAMI;AACF,cAAMA,OAAO,GAAG,CAAC,GAAGV,KAAK,CAACL,QAAV,EAAoBgB,IAApB,CAAyB,CAACC,CAAD,EAAGC,CAAH,KAAQ;AAAE,iBAAQD,CAAC,CAACG,EAAF,GAAOF,CAAC,CAACE,EAAT,GAAa,CAAb,GAAe,CAAC,CAAxB;AAA2B,SAA9D,CAAhB;AACA,eAAO,EAAC,GAAGf,KAAJ;AAAUJ,UAAAA,gBAAgB,EAACc;AAA3B,SAAP;AACD;;AACT,SAAKlB,gBAAL;AACQ,aAAM,EACF,GAAGQ,KADD;AAEFF,QAAAA,SAAS,EAACG,MAAM,CAACQ;AAFf,OAAN;;AAIR,SAAKhB,gBAAL;AAAsB;AAClB,cAAMuB,MAAM,GAAG,CAAC,GAAGhB,KAAK,CAACF,SAAV,EAAqBM,MAArB,CAA4Ba,IAAI,IAAI;AAC/C,cAAGA,IAAI,CAACF,EAAL,KAAUd,MAAM,CAACQ,IAAP,CAAYM,EAAtB,IAA4Bd,MAAM,CAACQ,IAAP,CAAYS,KAAZ,IAAmB,CAAlD,EACE,OAAO,KAAP,CADF,KAEI;AACF,gBAAGD,IAAI,CAACF,EAAL,KAAUd,MAAM,CAACQ,IAAP,CAAYM,EAAtB,IAA4Bd,MAAM,CAACQ,IAAP,CAAYS,KAAZ,GAAkB,CAAjD,EACED,IAAI,CAACC,KAAL;AACF,mBAAO,IAAP;AACD;AACJ,SARc,CAAf;AASA,eAAO,EACH,GAAGlB,KADA;AAEHF,UAAAA,SAAS,EAACkB;AAFP,SAAP;AAIH;;AACP;AACC,aAAOhB,KAAP;AA7CF;AA+CA,CAhDD;;AAiDA,eAAgBD,cAAhB","sourcesContent":["import {FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, FETCH_CART_ITEMS, REMOVE_FROM_CART}  from \"../actions/types\";\n\nconst initialStateProducts = {\n    products:[],\n    filteredProducts:[],\n    search:\"\",\n    cartItems:[]\n  }\n\nconst productReducer = (state = initialStateProducts , action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_PRODUCTS:\n\t\t\treturn {...state,\n                products: action.payload,\n                filteredProducts:action.payload\n            }\n         case SEARCH_PRODUCTS:\n                return {\n                    ...state,\n                    filteredProducts:[...state.products].filter(product => {\n                        return product.title.toLowerCase().includes(action.data.toLowerCase());\n                     })\n                    }\n         case SORT_PRODUCTS:\n                if(action.data!==''){\n                    const updated =  [...state.products].sort((a,b) => {\n                      return (action.data===\"lowest\")?(a.price > b.price?1:-1):(a.price < b.price?1:-1);\n                    });\n                   return {...state,filteredProducts:updated};\n                }\n                else{\n                  const updated = [...state.products].sort((a,b)=> { return (a.id < b.id ?1:-1)});\n                  return {...state,filteredProducts:updated};\n                }\n        case FETCH_CART_ITEMS:\n                return{\n                    ...state,\n                    cartItems:action.data\n                }\n        case REMOVE_FROM_CART:{\n            const update = [...state.cartItems].filter(item => {\n                if(item.id===action.data.id && action.data.count<=1)\n                  return false;\n                else{\n                  if(item.id===action.data.id && action.data.count>1)\n                    item.count--;\n                  return true;\n                }\n            });\n            return {\n                ...state,\n                cartItems:update\n            }\n        }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\nexport default  productReducer;"]},"metadata":{},"sourceType":"module"}