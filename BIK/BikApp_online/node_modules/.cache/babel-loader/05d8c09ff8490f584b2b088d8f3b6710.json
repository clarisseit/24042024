{"ast":null,"code":"import { useState, useEffect, useReducer } from 'react';\nimport { FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, FETCH_CART_ITEMS } from '../actions/types';\nexport default (() => {\n  const [search, setSearch] = useState(\"\");\n\n  const productReducer = (state, action) => {\n    switch (action.type) {\n      case FETCH_PRODUCTS:\n        return { ...state,\n          products: action.payload,\n          filteredProducts: action.payload\n        };\n\n      case SEARCH_PRODUCTS:\n        return { ...state,\n          filteredProducts: [...state.products].filter(product => {\n            return product.title.toLowerCase().includes(action.data.toLowerCase());\n          })\n        };\n\n      case SORT_PRODUCTS:\n        if (action.data !== '') {\n          const updated = [...state.products].sort((a, b) => {\n            return action.data === \"lowest\" ? a.price > b.price ? 1 : -1 : a.price < b.price ? 1 : -1;\n          });\n          return { ...state,\n            filteredProducts: updated\n          };\n        } else {\n          const updated = [...state.products].sort((a, b) => {\n            return a.id < b.id ? 1 : -1;\n          });\n          return { ...state,\n            filteredProducts: updated\n          };\n        }\n\n      case FETCH_CART_ITEMS:\n        return { ...state,\n          cartItems: action.data\n        };\n\n      default:\n        return state;\n    }\n  };\n\n  const initialStateProducts = {\n    products: [],\n    filteredProducts: [],\n    search: \"\",\n    cartItems: []\n  };\n  const [state, dispatch] = useReducer(productReducer, initialStateProducts); //Products\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/products/\").then(res => res.json()).then(jsonResponse => {\n      dispatch({\n        type: FETCH_PRODUCTS,\n        payload: jsonResponse\n      });\n    });\n    return () => {};\n  }, []);\n  console.log(state, \"prod\"); //Local Storage\n\n  useEffect(() => {\n    if (localStorage.getItem(\"cartItems\")) {\n      dispatch({\n        type: FETCH_CART_ITEMS,\n        data: JSON.parse(localStorage.getItem(\"cartItems\"))\n      });\n    }\n\n    return () => {\n      localStorage.getItem(\"cartItems\");\n      console.log(\"clean up\");\n    };\n  }, []); //Search \n\n  useEffect(() => {\n    dispatch({\n      type: SEARCH_PRODUCTS,\n      data: search\n    });\n    return () => {\n      console.log(\"clean up\");\n    };\n  }, [search, state.products]);\n  return {\n    filteredProducts: state.filteredProducts,\n    cartItems: state.cartItems,\n    onAddCart: product => {\n      const cartItem = state.cartItems;\n      let productAlreadyInCart = false;\n      cartItem.forEach(item => {\n        if (item.id === product.id) {\n          productAlreadyInCart = true;\n          item.count++;\n        }\n      });\n\n      if (!productAlreadyInCart) {\n        cartItem.push({ ...product,\n          count: 1\n        });\n      }\n\n      dispatch({\n        type: FETCH_CART_ITEMS,\n        data: cartItem\n      });\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    handleSearch: value => {\n      setSearch(value);\n    },\n    handleChangeSort: sort => {\n      dispatch({\n        type: SORT_PRODUCTS,\n        data: sort\n      });\n    },\n    onRemoveCart: removeItem => {\n      const update = [...state.cartItems].filter(item => {\n        if (item.id === removeItem.id && removeItem.count <= 1) return false;else {\n          if (item.id === removeItem.id && removeItem.count > 1) item.count--;\n          return true;\n        }\n      });\n      dispatch({\n        type: FETCH_CART_ITEMS,\n        data: update\n      });\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    search\n  };\n});","map":{"version":3,"sources":["/Users/graj/projects/e-commerece/src/components/useProducts.js"],"names":["useState","useEffect","useReducer","FETCH_PRODUCTS","SEARCH_PRODUCTS","SORT_PRODUCTS","FETCH_CART_ITEMS","search","setSearch","productReducer","state","action","type","products","payload","filteredProducts","filter","product","title","toLowerCase","includes","data","updated","sort","a","b","price","id","cartItems","initialStateProducts","dispatch","fetch","then","res","json","jsonResponse","console","log","localStorage","getItem","JSON","parse","onAddCart","cartItem","productAlreadyInCart","forEach","item","count","push","setItem","stringify","handleSearch","value","handleChangeSort","onRemoveCart","removeItem","update"],"mappings":"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","sourcesContent":["import {useState,useEffect,useReducer} from 'react';\nimport { FETCH_PRODUCTS, SEARCH_PRODUCTS, SORT_PRODUCTS, FETCH_CART_ITEMS} from '../actions/types';\n\n\nexport default () => {\n\n\n  const [search, setSearch] = useState(\"\");\n\n\n  const productReducer = (state , action) => {\n\tswitch (action.type) {\n\t\tcase FETCH_PRODUCTS:\n\t\t\treturn {...state,\n                products: action.payload,\n                filteredProducts:action.payload\n            }\n         case SEARCH_PRODUCTS:\n                return {\n                    ...state,\n                    filteredProducts:[...state.products].filter(product => {\n                        return product.title.toLowerCase().includes(action.data.toLowerCase());\n                     })\n                    }\n         case SORT_PRODUCTS:\n                if(action.data!==''){\n                    const updated =  [...state.products].sort((a,b) => {\n                      return (action.data===\"lowest\")?(a.price > b.price?1:-1):(a.price < b.price?1:-1);\n                    });\n                   return {...state,filteredProducts:updated};\n                }\n                else{\n                  const updated = [...state.products].sort((a,b)=> { return (a.id < b.id ?1:-1)});\n                  return {...state,filteredProducts:updated};\n                }\n        case FETCH_CART_ITEMS:\n                return{\n                    ...state,\n                    cartItems:action.data\n                }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\n  const initialStateProducts = {\n      products:[],\n      filteredProducts:[],\n      search:\"\",\n      cartItems:[]\n    }\n\n  const [state, dispatch] = useReducer(productReducer, initialStateProducts)\n\n//Products\n    useEffect(() => {\n      fetch(\"http://localhost:8000/products/\")\n        .then(res => res.json())\n        .then(jsonResponse => { \n            dispatch({type:FETCH_PRODUCTS,payload:jsonResponse});\n        })\n          return () => {\n           \n            }\n        }, []);\n\n        console.log(state,\"prod\")\n   \n        //Local Storage\n    useEffect(() => {\n        if(localStorage.getItem(\"cartItems\")){\n            dispatch({type:FETCH_CART_ITEMS,data:JSON.parse(localStorage.getItem(\"cartItems\"))})\n        }\n            return () => {\n            localStorage.getItem(\"cartItems\");\n            console.log(\"clean up\");\n            };\n        }, [])\n\n\n  //Search \n  useEffect(() => {\n    dispatch({type:SEARCH_PRODUCTS,data:search})\n\n    return () => {\n      console.log(\"clean up\");\n    };\n  }, [search,state.products])\n\n\n\nreturn{\n    filteredProducts:state.filteredProducts,\n    cartItems:state.cartItems,\n    onAddCart : (product) => {\n        const cartItem = state.cartItems;\n        let productAlreadyInCart = false;\n        cartItem.forEach(item => {\n            if(item.id===product.id){\n                productAlreadyInCart  = true;\n                item.count++;\n            }\n        })\n          if(!productAlreadyInCart){\n            cartItem.push({...product,count:1})\n          }\n        dispatch({type:FETCH_CART_ITEMS,data:cartItem});\n        localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n      },\n      handleSearch : (value) => {\n        setSearch(value);\n      },\n      handleChangeSort : (sort) => {\n         dispatch({type:SORT_PRODUCTS,data:sort})\n      },\n      onRemoveCart : (removeItem) => {\n       const update =  [...state.cartItems].filter(item => {\n            if(item.id===removeItem.id && removeItem.count<=1)\n              return false;\n            else{\n              if(item.id===removeItem.id && removeItem.count>1)\n                item.count--;\n              return true;\n            }\n        });\n        dispatch({type:FETCH_CART_ITEMS ,data:update})\n        localStorage.setItem(\"cartItems\",JSON.stringify(state.cartItems));\n      },\n      search\n  \n}\n\n}"]},"metadata":{},"sourceType":"module"}