{"ast":null,"code":"// import { useState, useEffect } from \"react\";\n// import fire from \"../config/fire\";\n// import firebase from \"firebase/app\"; // Import firebase from 'firebase/app'\n// import \"firebase/firestore\"; // Import Firestore module explicitly\n// import \"firebase/auth\"; // Import Auth module explicitly\n// import History from \"./History\";\n\n// export default () => {\n//   const [products, setProducts] = useState([]);\n//   const [filteredProducts, setfilteredProducts] = useState([]);\n//   const [cartItems, setCartItems] = useState([]);\n//   const [search, setSearch] = useState(\"\");\n//   const [usrLogin, setUsr_Login] = useState(\"\");\n//   const [pwdLogin, setPwd_Login] = useState(\"\");\n//   const [cnfPwdLogin, setCnfPwd_Login] = useState(\"\");\n//   const [guestCart, setGuestCart] = useState([]);\n//   const [user, setUser] = useState({});\n//   const [orders, setOrders] = useState([]);\n//   const [env] = useState(\"sandbox\");\n//   const [currency] = useState(\"USD\");\n//   const [client] = useState({\n//     sandbox:\n//       \"ATKphVPUKrAFnWXr042hYQsynmg9U_UUeudlf1RjYkyKf3rsf5s3IE-H1QZWn8ziKEZzq5WH4TRalZR_\",\n//     production: \"YOUR-PRODUCTION-APP-ID\",\n//   });\n\n//   const db = fire.firestore();\n\n//   // Products\n//   useEffect(() => {\n//     db.collection(\"products\")\n//       .get()\n//       .then((response) => {\n//         const data = response.docs.map((doc) => {\n//           const productData = doc.data();\n//           productData.id = doc.id;\n//           return productData;\n//         });\n//         setProducts(data);\n//         setfilteredProducts(data);\n//       });\n//     return () => {};\n//   }, [db]);\n\n//   useEffect(() => {\n//     const unsubscribe = fire.auth().onAuthStateChanged((user) => {\n//       if (user) {\n//         setUser({ userId: user.uid, email: user.email });\n\n//         let userCartItem = db.collection(\"User\").doc(user.uid);\n//         let orders = db.collection(\"Orders/\").doc(user.uid);\n\n//         userCartItem\n//           .get()\n//           .then(function (doc) {\n//             if (doc.exists) {\n//               setCartItems(doc.data().cartItems);\n//             }\n//           })\n//           .catch(function (error) {\n//             console.log(\"Error getting document:\", error);\n//           });\n\n//         orders\n//           .get()\n//           .then(function (doc) {\n//             if (doc.exists) {\n//               setOrders(doc.data().cartItems);\n//             }\n//           })\n//           .catch(function (error) {\n//             console.log(\"Error getting document:\", error);\n//           });\n//       } else {\n//         fire.auth().signInAnonymously();\n//       }\n//     });\n//     return () => {\n//       unsubscribe();\n//     };\n//   }, [db]);\n\n//   // Search\n//   useEffect(() => {\n//     setfilteredProducts(\n//       [...products].filter((product) => {\n//         return product.title.toLowerCase().includes(search.toLowerCase());\n//       })\n//     );\n//     return () => {};\n//   }, [search, products]);\n\n//   useEffect(() => {\n//     if (user.email === null) setGuestCart(cartItems);\n//     return () => {};\n//   }, [cartItems, user.email]);\n\n//   let resultFilter = (temp1, temp2) => {\n//     return temp1.filter(\n//       (temp1) => !temp2.some((temp2) => temp1.id === temp2.id)\n//     );\n//   };\n\n//   return {\n//     filteredProducts: filteredProducts,\n//     cartItems: cartItems,\n//     search: search,\n//     orders: orders,\n//     env: env,\n//     currency: currency,\n//     client: client,\n\n//     onAddCart: async (product) => {\n//       const cartItem = cartItems;\n//       let productAlreadyInCart = false;\n//       cartItem.forEach((item) => {\n//         if (item.id === product.id) {\n//           productAlreadyInCart = true;\n//           item.count++;\n//         }\n//       });\n//       if (!productAlreadyInCart) {\n//         cartItem.push({ ...product, count: 1 });\n//       }\n//       setCartItems([...cartItem]);\n//       if (user.userId !== null)\n//         await db\n//           .collection(\"User/\")\n//           .doc(user.userId)\n//           .set({ cartItems: cartItem });\n//     },\n//     handleSearch: (value) => {\n//       setSearch(value);\n//     },\n\n//     handleChangeSort: (sort) => {\n//       if (sort !== \"\") {\n//         const updated = [...products].sort((a, b) => {\n//           return sort === \"lowest\"\n//             ? a.price > b.price\n//               ? 1\n//               : -1\n//             : a.price < b.price\n//             ? 1\n//             : -1;\n//         });\n//         setfilteredProducts(updated);\n//       } else {\n//         const updated = [...products].sort((a, b) => {\n//           return a.id < b.id ? 1 : -1;\n//         });\n//         setfilteredProducts(updated);\n//       }\n//     },\n\n//     onRemoveCart: async (removeItem) => {\n//       const update = [...cartItems].filter((item) => {\n//         if (item.id === removeItem.id && removeItem.count <= 1) return false;\n//         else {\n//           if (item.id === removeItem.id && removeItem.count > 1) item.count--;\n//           return true;\n//         }\n//       });\n//       setCartItems(update);\n//       if (user.userId !== null)\n//         await db\n//           .collection(\"User/\")\n//           .doc(user.userId)\n//           .update({ cartItems: update });\n//     },\n\n//     userLoginChange: (value) => {\n//       setUsr_Login(value);\n//     },\n\n//     pwdLoginChange: (value) => {\n//       setPwd_Login(value);\n//     },\n\n//     cnfPwdLoginChange: (value) => {\n//       setCnfPwd_Login(value);\n//     },\n//     buy: (value) => {\n//       History.push(\"/Agricart-online-vegetable-shopping-reactjs/\" + value);\n//     },\n\n//     login: (e) => {\n//       e.preventDefault();\n//       fire\n//         .auth()\n//         .signInWithEmailAndPassword(usrLogin, pwdLogin)\n//         .then((res) => {\n//           if (res) {\n//             let userCartItem = db.collection(\"User\").doc(res.user.uid);\n//             userCartItem\n//               .get()\n//               .then(function (doc) {\n//                 if (doc.exists) {\n//                   let upc = doc.data().cartItems;\n\n//                   if (user.email === null) {\n//                     let update = [];\n//                     upc.forEach(function (cartItem) {\n//                       guestCart.forEach(function (guestCar) {\n//                         if (cartItem.title === guestCar.title) {\n//                           guestCar.count = cartItem.count + guestCar.count;\n//                           update.push(guestCar);\n//                         }\n//                       });\n//                     });\n//                     resultFilter(upc, guestCart).forEach(function (val) {\n//                       update.push(val);\n//                     });\n//                     resultFilter(guestCart, upc).forEach(function (val) {\n//                       update.push(val);\n//                     });\n//                     db.collection(\"User/\")\n//                       .doc(res.user.uid)\n//                       .set({ cartItems: update });\n//                     History.push(\"/Agricart-online-vegetable-shopping-reactjs\");\n//                   }\n//                 }\n//               })\n//               .catch(function (error) {\n//                 console.log(\"Error getting document:\", error);\n//               });\n//           }\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//     },\n\n//     signUp: (e) => {\n//       e.preventDefault();\n//       if (pwdLogin === cnfPwdLogin) {\n//         if (user.email !== null) {\n//           fire\n//             .auth()\n//             .createUserWithEmailAndPassword(usrLogin, pwdLogin)\n//             .then((res) => {\n//               if (res) {\n//                 History.push(\n//                   \"/Agricart-online-vegetable-shopping-reactjs/products\"\n//                 );\n//               }\n//             })\n//             .catch((err) => {\n//               console.log(err);\n//             });\n//         } else {\n//           const cred = firebase.auth.EmailAuthProvider.credential(\n//             usrLogin,\n//             pwdLogin\n//           );\n//           firebase.auth().currentUser.linkWithCredential(cred);\n//           History.push(\"/Agricart-online-vegetable-shopping-reactjs/products\");\n//           setUser({ ...user, email: usrLogin });\n//         }\n//       } else {\n//         alert(\"Password does not match\");\n//       }\n//     },\n\n//     logout: () => {\n//       fire.auth().signOut();\n//       setCartItems([]);\n//     },\n//     user: user,\n//     transcationSuccess: (data, cartItem) => {\n//       db.collection(\"Orders/\")\n//         .doc(user.userId)\n//         .set({ cartItems: cartItem, paymentDetails: data })\n//         .then(function () {\n//           db.collection(\"User/\").doc(user.userId).set({ cartItems: [] });\n//           setCartItems([]);\n//           History.push(\n//             \"/Agricart-online-vegetable-shopping-reactjs/orderConfirmation\"\n//           );\n//         })\n//         .catch(function (error) {\n//           console.log(\"Error writing document: \", error);\n//         });\n//     },\n//     transcationError: () => {\n//       console.log(\"Transaction failed\");\n//     },\n//     transcationCancelled: () => {\n//       console.log(\"Transaction cancelled\");\n//     },\n//     onCheckout: (e) => {\n//       History.push(\"/Agricart-online-vegetable-shopping-reactjs/checkout\");\n//     },\n//   };\n// };","map":{"version":3,"names":[],"sources":["C:/Users/Admin/Documents/BikApp_online/src/components/useProducts.js"],"sourcesContent":["// import { useState, useEffect } from \"react\";\n// import fire from \"../config/fire\";\n// import firebase from \"firebase/app\"; // Import firebase from 'firebase/app'\n// import \"firebase/firestore\"; // Import Firestore module explicitly\n// import \"firebase/auth\"; // Import Auth module explicitly\n// import History from \"./History\";\n\n// export default () => {\n//   const [products, setProducts] = useState([]);\n//   const [filteredProducts, setfilteredProducts] = useState([]);\n//   const [cartItems, setCartItems] = useState([]);\n//   const [search, setSearch] = useState(\"\");\n//   const [usrLogin, setUsr_Login] = useState(\"\");\n//   const [pwdLogin, setPwd_Login] = useState(\"\");\n//   const [cnfPwdLogin, setCnfPwd_Login] = useState(\"\");\n//   const [guestCart, setGuestCart] = useState([]);\n//   const [user, setUser] = useState({});\n//   const [orders, setOrders] = useState([]);\n//   const [env] = useState(\"sandbox\");\n//   const [currency] = useState(\"USD\");\n//   const [client] = useState({\n//     sandbox:\n//       \"ATKphVPUKrAFnWXr042hYQsynmg9U_UUeudlf1RjYkyKf3rsf5s3IE-H1QZWn8ziKEZzq5WH4TRalZR_\",\n//     production: \"YOUR-PRODUCTION-APP-ID\",\n//   });\n\n//   const db = fire.firestore();\n\n//   // Products\n//   useEffect(() => {\n//     db.collection(\"products\")\n//       .get()\n//       .then((response) => {\n//         const data = response.docs.map((doc) => {\n//           const productData = doc.data();\n//           productData.id = doc.id;\n//           return productData;\n//         });\n//         setProducts(data);\n//         setfilteredProducts(data);\n//       });\n//     return () => {};\n//   }, [db]);\n\n//   useEffect(() => {\n//     const unsubscribe = fire.auth().onAuthStateChanged((user) => {\n//       if (user) {\n//         setUser({ userId: user.uid, email: user.email });\n\n//         let userCartItem = db.collection(\"User\").doc(user.uid);\n//         let orders = db.collection(\"Orders/\").doc(user.uid);\n\n//         userCartItem\n//           .get()\n//           .then(function (doc) {\n//             if (doc.exists) {\n//               setCartItems(doc.data().cartItems);\n//             }\n//           })\n//           .catch(function (error) {\n//             console.log(\"Error getting document:\", error);\n//           });\n\n//         orders\n//           .get()\n//           .then(function (doc) {\n//             if (doc.exists) {\n//               setOrders(doc.data().cartItems);\n//             }\n//           })\n//           .catch(function (error) {\n//             console.log(\"Error getting document:\", error);\n//           });\n//       } else {\n//         fire.auth().signInAnonymously();\n//       }\n//     });\n//     return () => {\n//       unsubscribe();\n//     };\n//   }, [db]);\n\n//   // Search\n//   useEffect(() => {\n//     setfilteredProducts(\n//       [...products].filter((product) => {\n//         return product.title.toLowerCase().includes(search.toLowerCase());\n//       })\n//     );\n//     return () => {};\n//   }, [search, products]);\n\n//   useEffect(() => {\n//     if (user.email === null) setGuestCart(cartItems);\n//     return () => {};\n//   }, [cartItems, user.email]);\n\n//   let resultFilter = (temp1, temp2) => {\n//     return temp1.filter(\n//       (temp1) => !temp2.some((temp2) => temp1.id === temp2.id)\n//     );\n//   };\n\n//   return {\n//     filteredProducts: filteredProducts,\n//     cartItems: cartItems,\n//     search: search,\n//     orders: orders,\n//     env: env,\n//     currency: currency,\n//     client: client,\n\n//     onAddCart: async (product) => {\n//       const cartItem = cartItems;\n//       let productAlreadyInCart = false;\n//       cartItem.forEach((item) => {\n//         if (item.id === product.id) {\n//           productAlreadyInCart = true;\n//           item.count++;\n//         }\n//       });\n//       if (!productAlreadyInCart) {\n//         cartItem.push({ ...product, count: 1 });\n//       }\n//       setCartItems([...cartItem]);\n//       if (user.userId !== null)\n//         await db\n//           .collection(\"User/\")\n//           .doc(user.userId)\n//           .set({ cartItems: cartItem });\n//     },\n//     handleSearch: (value) => {\n//       setSearch(value);\n//     },\n\n//     handleChangeSort: (sort) => {\n//       if (sort !== \"\") {\n//         const updated = [...products].sort((a, b) => {\n//           return sort === \"lowest\"\n//             ? a.price > b.price\n//               ? 1\n//               : -1\n//             : a.price < b.price\n//             ? 1\n//             : -1;\n//         });\n//         setfilteredProducts(updated);\n//       } else {\n//         const updated = [...products].sort((a, b) => {\n//           return a.id < b.id ? 1 : -1;\n//         });\n//         setfilteredProducts(updated);\n//       }\n//     },\n\n//     onRemoveCart: async (removeItem) => {\n//       const update = [...cartItems].filter((item) => {\n//         if (item.id === removeItem.id && removeItem.count <= 1) return false;\n//         else {\n//           if (item.id === removeItem.id && removeItem.count > 1) item.count--;\n//           return true;\n//         }\n//       });\n//       setCartItems(update);\n//       if (user.userId !== null)\n//         await db\n//           .collection(\"User/\")\n//           .doc(user.userId)\n//           .update({ cartItems: update });\n//     },\n\n//     userLoginChange: (value) => {\n//       setUsr_Login(value);\n//     },\n\n//     pwdLoginChange: (value) => {\n//       setPwd_Login(value);\n//     },\n\n//     cnfPwdLoginChange: (value) => {\n//       setCnfPwd_Login(value);\n//     },\n//     buy: (value) => {\n//       History.push(\"/Agricart-online-vegetable-shopping-reactjs/\" + value);\n//     },\n\n//     login: (e) => {\n//       e.preventDefault();\n//       fire\n//         .auth()\n//         .signInWithEmailAndPassword(usrLogin, pwdLogin)\n//         .then((res) => {\n//           if (res) {\n//             let userCartItem = db.collection(\"User\").doc(res.user.uid);\n//             userCartItem\n//               .get()\n//               .then(function (doc) {\n//                 if (doc.exists) {\n//                   let upc = doc.data().cartItems;\n\n//                   if (user.email === null) {\n//                     let update = [];\n//                     upc.forEach(function (cartItem) {\n//                       guestCart.forEach(function (guestCar) {\n//                         if (cartItem.title === guestCar.title) {\n//                           guestCar.count = cartItem.count + guestCar.count;\n//                           update.push(guestCar);\n//                         }\n//                       });\n//                     });\n//                     resultFilter(upc, guestCart).forEach(function (val) {\n//                       update.push(val);\n//                     });\n//                     resultFilter(guestCart, upc).forEach(function (val) {\n//                       update.push(val);\n//                     });\n//                     db.collection(\"User/\")\n//                       .doc(res.user.uid)\n//                       .set({ cartItems: update });\n//                     History.push(\"/Agricart-online-vegetable-shopping-reactjs\");\n//                   }\n//                 }\n//               })\n//               .catch(function (error) {\n//                 console.log(\"Error getting document:\", error);\n//               });\n//           }\n//         })\n//         .catch((err) => {\n//           console.log(err);\n//         });\n//     },\n\n//     signUp: (e) => {\n//       e.preventDefault();\n//       if (pwdLogin === cnfPwdLogin) {\n//         if (user.email !== null) {\n//           fire\n//             .auth()\n//             .createUserWithEmailAndPassword(usrLogin, pwdLogin)\n//             .then((res) => {\n//               if (res) {\n//                 History.push(\n//                   \"/Agricart-online-vegetable-shopping-reactjs/products\"\n//                 );\n//               }\n//             })\n//             .catch((err) => {\n//               console.log(err);\n//             });\n//         } else {\n//           const cred = firebase.auth.EmailAuthProvider.credential(\n//             usrLogin,\n//             pwdLogin\n//           );\n//           firebase.auth().currentUser.linkWithCredential(cred);\n//           History.push(\"/Agricart-online-vegetable-shopping-reactjs/products\");\n//           setUser({ ...user, email: usrLogin });\n//         }\n//       } else {\n//         alert(\"Password does not match\");\n//       }\n//     },\n\n//     logout: () => {\n//       fire.auth().signOut();\n//       setCartItems([]);\n//     },\n//     user: user,\n//     transcationSuccess: (data, cartItem) => {\n//       db.collection(\"Orders/\")\n//         .doc(user.userId)\n//         .set({ cartItems: cartItem, paymentDetails: data })\n//         .then(function () {\n//           db.collection(\"User/\").doc(user.userId).set({ cartItems: [] });\n//           setCartItems([]);\n//           History.push(\n//             \"/Agricart-online-vegetable-shopping-reactjs/orderConfirmation\"\n//           );\n//         })\n//         .catch(function (error) {\n//           console.log(\"Error writing document: \", error);\n//         });\n//     },\n//     transcationError: () => {\n//       console.log(\"Transaction failed\");\n//     },\n//     transcationCancelled: () => {\n//       console.log(\"Transaction cancelled\");\n//     },\n//     onCheckout: (e) => {\n//       History.push(\"/Agricart-online-vegetable-shopping-reactjs/checkout\");\n//     },\n//   };\n// };\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}